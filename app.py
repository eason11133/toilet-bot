import os 
import hmac
import hashlib
import base64
from math import radians, cos, sin, asin, sqrt
import sqlite3
import requests
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError, LineBotApiError
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage,
    LocationMessage, FlexSendMessage
)
from dotenv import load_dotenv

load_dotenv()

if not os.getenv("LINE_CHANNEL_ACCESS_TOKEN") or not os.getenv("LINE_CHANNEL_SECRET"):
    raise ValueError("‚ùå Ë´ãÁ¢∫Ë™ç LINE_CHANNEL_ACCESS_TOKEN Âíå LINE_CHANNEL_SECRET Â∑≤Ë®≠ÁΩÆÂú®Áí∞Â¢ÉËÆäÊï∏‰∏≠")

app = Flask(__name__)
line_bot_api = LineBotApi(os.getenv("LINE_CHANNEL_ACCESS_TOKEN"))
handler = WebhookHandler(os.getenv("LINE_CHANNEL_SECRET"))

user_locations = {}

def create_db():
    conn = sqlite3.connect('toilets.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS toilets
                 (name TEXT, type TEXT, latitude REAL, longitude REAL, address TEXT)''')
    conn.commit()
    conn.close()

def haversine(lat1, lon1, lat2, lon2):
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = sin(dlat/2)**2 + cos(lat1)*cos(lat2)*sin(dlon/2)**2
    c = 2*asin(sqrt(a))
    r = 6371000
    return c * r

def get_nearest_toilets(lat, lon, radius=500, min_results=3, max_results=5):
    # Êü•Êú¨Âú∞Ë≥áÊñôÂ∫´
    conn = sqlite3.connect("toilets.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, address, latitude, longitude FROM toilets")
    rows = cursor.fetchall()
    conn.close()

    local_results = []
    for name, address, toilet_lat, toilet_lon in rows:
        if toilet_lat is None or toilet_lon is None:
            continue
        distance = haversine(lat, lon, toilet_lat, toilet_lon)
        if distance <= radius:
            local_results.append({
                "source": "local",
                "name": name,
                "address": address,
                "latitude": toilet_lat,
                "longitude": toilet_lon,
                "distance": distance
            })

    # Â¶ÇÊûúÊú¨Âú∞Ë≥áÊñô‰∏çÂ§†ÔºåÂÜçÊü• OSM
    if len(local_results) < min_results:
        try:
            response = requests.post("https://overpass-api.de/api/interpreter", data=f"""
            [out:json];
            (
              node["amenity"="toilets"](around:{radius},{lat},{lon});
              way["amenity"="toilets"](around:{radius},{lat},{lon});
              relation["amenity"="toilets"](around:{radius},{lat},{lon});
            );
            out center;
            """)
            data = response.json().get("elements", [])
            for el in data:
                if el.get('type') == 'node':
                    toilet_lat = el.get('lat')
                    toilet_lon = el.get('lon')
                else:
                    center = el.get('center')
                    if not center: continue
                    toilet_lat = center.get('lat')
                    toilet_lon = center.get('lon')

                if toilet_lat is None or toilet_lon is None:
                    continue

                distance = haversine(lat, lon, toilet_lat, toilet_lon)
                name = el.get('tags', {}).get('name', 'ÁÑ°ÂêçÁ®±')

                local_results.append({
                    "source": "overpass",
                    "name": name,
                    "address": "‰æÜËá™ OpenStreetMap",
                    "latitude": toilet_lat,
                    "longitude": toilet_lon,
                    "distance": distance
                })
        except Exception as e:
            print(f"‚ö†Ô∏è Overpass API ÈåØË™§: {e}")

    local_results.sort(key=lambda x: x["distance"])
    return local_results[:max_results]

@app.route("/")
def home():
    return "‚úÖ LINE Bot is running!"

@app.route("/callback", methods=["POST"])
def callback():
    signature = request.headers.get("X-Line-Signature", "")
    body = request.get_data(as_text=True)

    secret = os.getenv("LINE_CHANNEL_SECRET")
    hash = hmac.new(secret.encode(), body.encode(), hashlib.sha256).digest()
    calculated_signature = base64.b64encode(hash).decode()

    if calculated_signature != signature:
        print("‚ùå Invalid signature")
        abort(400)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    except LineBotApiError as e:
        print(f"‚ùå LineBot API error: {e}")
        abort(500)

    return "OK"

@handler.add(MessageEvent, message=TextMessage)
def handle_text_message(event):
    user_text = event.message.text.strip()
    user_id = event.source.user_id

    if "ÂªÅÊâÄ" in user_text:
        if user_id in user_locations:
            lat, lon = user_locations[user_id]
            toilets = get_nearest_toilets(lat, lon)

            if not toilets:
                reply_text = "üöΩ ÂæàÊä±Ê≠âÔºåÊú™ËÉΩÊâæÂà∞ÈôÑËøëÁöÑÂªÅÊâÄ„ÄÇ"
                line_bot_api.reply_message(
                    event.reply_token, TextSendMessage(text=reply_text)
                )
                return

            best = toilets[0]
            map_url = f"https://www.google.com/maps/search/?api=1&query={best['latitude']},{best['longitude']}"
            flex_message = {
                "type": "bubble",
                "hero": {
                    "type": "image",
                    "url": "https://i.imgur.com/BRO9ZQw.png",
                    "size": "full",
                    "aspectRatio": "20:13",
                    "aspectMode": "cover"
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {"type": "text", "text": best['name'], "weight": "bold", "size": "lg"},
                        {"type": "text", "text": f"‰æÜÊ∫êÔºö{best['source']}", "size": "sm", "color": "#AAAAAA"},
                        {"type": "text", "text": f"Ë∑ùÈõ¢‰Ω† {best['distance']:.0f} ÂÖ¨Â∞∫", "size": "sm"}
                    ]
                },
                "footer": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {"type": "button", "style": "link", "action": {
                            "type": "uri", "label": "üó∫ ÈñãÂïüÂú∞ÂúñÂ∞éËà™", "uri": map_url}}
                    ]
                }
            }
            line_bot_api.reply_message(
                event.reply_token, FlexSendMessage(alt_text="ÊúÄËøëÁöÑÂªÅÊâÄË≥áË®ä", contents=flex_message)
            )
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="Ë´ãÂÖàÂÇ≥ÈÄÅÊÇ®ÁõÆÂâçÁöÑ‰ΩçÁΩÆÔºåËÆìÊàëÂπ´ÊÇ®ÊâæÈôÑËøëÁöÑÂªÅÊâÄÂñîÔºÅ")
            )
    else:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="Ë´ãËº∏ÂÖ•„ÄåÂªÅÊâÄ„Äç‰æÜÊü•Ë©¢ÈôÑËøëÂªÅÊâÄÔºåÊàñÂÖàÂÇ≥ÈÄÅÊÇ®ÁõÆÂâçÁöÑ‰ΩçÁΩÆ„ÄÇ")
        )

@handler.add(MessageEvent, message=LocationMessage)
def handle_location_message(event):
    user_id = event.source.user_id
    lat = event.message.latitude
    lon = event.message.longitude
    user_locations[user_id] = (lat, lon)

    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=f"üìç ‰ΩçÁΩÆÂ∑≤Êõ¥Êñ∞ÔºåÁ∑ØÂ∫¶Ôºö{lat}\nÁ∂ìÂ∫¶Ôºö{lon}\nË´ãËº∏ÂÖ•„ÄåÂªÅÊâÄ„ÄçÊü•Ë©¢ÈôÑËøëÂªÅÊâÄ„ÄÇ")
    )

if __name__ == "__main__":
    create_db()
    port = int(os.getenv("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
